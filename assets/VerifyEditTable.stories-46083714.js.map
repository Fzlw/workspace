{"version":3,"file":"VerifyEditTable.stories-46083714.js","sources":["../../../packages/component/src/useVerifyEditTable/index.ts"],"sourcesContent":["import { isUndefined } from 'lodash-es'\nimport { UnwrapRef, computed, h, ref, shallowRef, unref } from 'vue'\nimport { ElFormItem, FormInstance, FormValidateFailure } from 'element-plus'\nimport { ExpandColumn, ExcludeColumn, renderColumn } from '../useColumn'\nimport { UseFormColumn, formatFormColumn } from '../useForm'\nimport { UseTableOptions, defaultFormatter, TableState } from '../useTable'\nimport { UseEditTableColumn, EditTableRow, useEditTable } from '../useEditTable'\nimport { LoadMode } from '../Table'\n\nexport type UseVerifyEditTableColumn<T> = ExpandColumn<UseEditTableColumn<T>, ExcludeColumn<UseFormColumn, 'hidden'>>\n\nexport type UseVerifyEditTableOptions<T> = UseTableOptions<T, UseVerifyEditTableColumn<T>>\n\nexport interface VerifyTableState<T> {\n  tableState: TableState<T>\n  model: T | null\n  ref?: any\n}\n\nexport function useVerifyEditTable<T extends EditTableRow>(opts: UseVerifyEditTableOptions<T>) {\n  const { tableState, editRow, delRow, cancelRow, saveRow, addRow, ...other } = useEditTable<T>({\n    mapColumn(i) {\n      const { formItemProps, editable, formatter, ...other } = formatFormColumn(i) as UseVerifyEditTableColumn<T>\n\n      return {\n        ...other,\n        formatter(row, column, cellValue, index) {\n          if ((isUndefined(editable) || editable === true) && row?._editing) {\n            return h(\n              ElFormItem,\n              {\n                ...formItemProps,\n                label: '',\n              },\n              { default: () => renderColumn(row, other) ?? '' }\n            )\n          }\n\n          if (formatter) return formatter(row, column, cellValue, index)\n\n          return defaultFormatter(cellValue, other.rFormat, other.defaultValue) ?? cellValue ?? other.defaultValue\n        },\n      }\n    },\n    ...opts,\n    ...(opts.query && {\n      query(p) {\n        if (p.currentPage === 1 || unref(tableState).mode === LoadMode.single) {\n          if (unref(model)) {\n            model.value = null\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return opts.query!(p)\n      },\n    }),\n  })\n\n  const verifyForm = shallowRef<FormInstance | null>(null)\n  const model = ref<VerifyTableState<T>['model']>(null)\n  const verifyTableState = computed<VerifyTableState<T>>(() => {\n    return {\n      tableState: unref(tableState),\n      model: unref(model) as T,\n      ref(instance: any) {\n        verifyForm.value = instance?.elForm\n      },\n    }\n  })\n\n  const vEditRow: typeof editRow = (row) => {\n    if (unref(model)) return\n\n    model.value = row as UnwrapRef<T>\n\n    editRow(row)\n  }\n\n  const vDelRow: typeof delRow = (row) => {\n    model.value = null\n\n    delRow(row)\n  }\n\n  const vCancelRow: typeof cancelRow = (row) => {\n    model.value = null\n\n    cancelRow(row)\n  }\n\n  const vSaveRow = async (row: T): Promise<[boolean, FormValidateFailure['fields'] | null]> => {\n    try {\n      const valid = await verifyForm.value?.validate?.()\n\n      if (valid) {\n        model.value = null\n\n        saveRow(row)\n      }\n\n      return [!!valid, null]\n    } catch (error) {\n      return [false, error as FormValidateFailure['fields']]\n    }\n  }\n\n  const vAddRow = (row?: T, position = -1) => {\n    if (unref(model)) return\n\n    const newRow = addRow(row, position)\n\n    model.value = newRow as UnwrapRef<T>\n\n    return newRow\n  }\n\n  const hasEditingRow = () => {\n    return !!unref(model)\n  }\n\n  return {\n    verifyTableState,\n    form: verifyForm,\n    editRow: vEditRow,\n    delRow: vDelRow,\n    cancelRow: vCancelRow,\n    saveRow: vSaveRow,\n    addRow: vAddRow,\n    hasEditingRow,\n    ...other,\n  }\n}\n"],"names":["useVerifyEditTable","opts","tableState","delRow","cancelRow","saveRow","addRow","i","other","other2","row","column","cellValue","index","isUndefined","editable","h","ElFormItem","formItemProps","renderColumn","formatter","defaultFormatter","p","unref","LoadMode","model","verifyForm","shallowRef","ref","computed","instance","editRow","valid","_b","_a","error","position","newRow"],"mappings":"8YAqBiBA,EAAAC,EAAA,CACL,KAAA,CAAA,WAAAC,YAA2B,OAAAC,EAAA,UAAAC,EAAW,QAAAC,EAAS,OAAAC,UAAsB,CAEpE,UAAAC,EAAA,CAAA,KACFC,CAAAA,cAAAA,EAAAA,SAAAA,EAAAA,UAAAA,EAAAA,GAAAA,GAAAA,EAAAA,CAAAA,EAAA,MACO,CACR,GAAAC,EACS,UAAAC,EAAAC,EAAAC,EAAAC,EAAA,CACL,OAAAC,EAAAC,CAAA,GAAAA,IAAA,MAAAL,GAAA,MAAAA,EAAA,UACAM,EAAAC,EACK,CAEL,GAAAC,EACE,MAAS,EACb,EACF,CAAA,QAAA,IAAAC,EAAAT,EAAAD,CAAA,GAAA,EAAA,CAEA,EAEOW,EACTA,EAAAV,EAAAC,EAAAC,EAAAC,CAAA,EACFQ,EAAAT,EAAAH,EAAA,QAAAA,EAAA,YAAA,GAAAG,GAAAH,EAAA,YACF,CAAA,CAEA,EAAkB,KAEV,GAAAR,EAAA,QACE,MAAAqB,EAAA,CACF,OAAAA,EAAA,cAAc,GAAAC,EAAArB,CAAA,EAAA,OAAAsB,EAAA,SAChBD,EAAAE,CAAA,IACFA,EAAA,MAAA,MAIJxB,EAAA,MAAAqB,CAAA,CACD,CAEK,CACN,CAAM,EACAI,EAAAC,MAAiD,EAC9CF,EAAAG,EAAA,IAAA,EA4DP,MACM,CACN,iBA7D8BC,EAAA,KAC5B,CACA,WAAmBN,EAAArB,CAAA,EACjB,MAAAqB,EAAWE,GACb,IAAAK,EAAA,CACFJ,EAAA,MAAAI,GAAA,YAAAA,EAAA,MACD,CAED,EACE,EAqDA,KAAQJ,EACR,QAtDkBhB,GAAA,CAElBa,EAAcE,CAAA,IAGhBA,EAAA,MAAAf,EAEMqB,EAAArB,CAAA,EACJ,EA+CA,OA7CUA,GAAA,CACZe,EAAA,MAAA,KAEMtB,EAAAO,CAAA,CACJ,EA0CA,UAxCaA,GAAA,CACfe,EAAA,MAAA,KAEMrB,EAAAM,CAAA,CACJ,EAqCA,QApCgB,MAAMA,GAAW,SAE/B,GAAA,CACE,MAAAsB,EAAc,OAAAC,GAAAC,EAAAR,EAAA,QAAA,YAAAQ,EAAA,WAAA,YAAAD,EAAA,KAAAC,IAEd,OAAAF,IACFP,EAAA,MAAA,KAEApB,EAAUK,CAAA,GAEH,CAAC,IAA6C,IAAA,CACvD,OAAAyB,EAAA,CACF,MAAA,CAAA,GAAAA,CAAA,CAEA,CACE,EAsBA,OAtBkB,CAAAzB,EAAA0B,EAAA,KAAA,CAEZ,GAAAb,EAAAE,CAAS,EAEf,OAEO,MAAAY,EAAA/B,EAAAI,EAAA0B,CAAA,EACT,OAAAX,EAAA,MAAAY,GAGE,EAaF,cAZA,IAEO,CAAA,CAAAd,EAAAE,CAAA,EAWT,GAAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}