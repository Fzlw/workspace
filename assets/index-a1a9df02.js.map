{"version":3,"file":"index-a1a9df02.js","sources":["../../../packages/component/src/useForm/index.ts"],"sourcesContent":["import { ref, computed, ComputedRef, unref, Ref, toRaw } from 'vue'\nimport { isUndefined, cloneDeep } from 'lodash-es'\nimport { FormItemProps, FormInstance } from 'element-plus'\nimport { FormColumn as OriginFormColumn } from '../Form'\nimport { ExpandColumn, ExcludeColumn } from '../useColumn'\n\nexport type UseFormColumn = ExpandColumn<\n  ExcludeColumn<OriginFormColumn, 'formItemProps'>,\n  Partial<Pick<FormItemProps, 'label' | 'labelWidth' | 'rules'>> & {\n    hidden?: boolean\n    requiredMsg?: string\n    formItemProps?: OriginFormColumn['formItemProps']\n  }\n>\nexport interface FormState<T> {\n  submitting: boolean\n  columns: OriginFormColumn[]\n  model: T\n  // FIXME: 修复 tsconfig.json strict: true 下报错的问题\n  ref?: any\n}\n\ntype FormColumn = ExpandColumn<OriginFormColumn, { _hidden?: boolean }>\n\nexport const formatFormColumn = (column: UseFormColumn) => {\n  const { prop, formItemProps, label, labelWidth, rules, requiredMsg, hidden, ...other } = column\n\n  const newColumn: FormColumn = {\n    ...other,\n    _hidden: hidden,\n    prop,\n    formItemProps: {\n      prop,\n      label,\n      labelWidth,\n      rules: rules\n        ? rules\n        : requiredMsg\n        ? [\n            {\n              required: true,\n              message: requiredMsg,\n            },\n          ]\n        : [],\n      ...formItemProps,\n    },\n  }\n\n  return newColumn\n}\n\nexport interface UseFormOptions<T> {\n  columns: UseFormColumn[]\n  initData?: Partial<T>\n}\n\nexport type SubmitPost<T> = (model: T) => any\n\n/**\n * TODO: 会产生编译错误 超过最大推导栈\n */\n// @ts-ignore\nexport function useForm<T extends object>(\n  opts: UseFormOptions<T>\n): {\n  formState: ComputedRef<FormState<T>>\n  getColumn(prop: UseFormColumn['prop']): FormColumn | null\n  setColumn(prop: UseFormColumn['prop'], obj: Partial<UseFormColumn> | null, newVal?: any): void\n  toggleColumn(prop: UseFormColumn['prop'] | UseFormColumn['prop'][], state?: boolean): void\n  submit(post: SubmitPost<T>): Promise<void>\n  setModel(obj: Partial<T>, reset?: boolean): void\n  form: Ref<FormInstance | null>\n  getModel<K extends keyof T = keyof T>(key: K): T[K]\n}\n\nexport function useForm<T extends object>(opts: UseFormOptions<T>) {\n  const model = ref<T>({ ...(opts.initData ?? null) } as T)\n  const columns = ref<FormColumn[]>(opts.columns.map((i) => formatFormColumn(i)))\n\n  const formRef = ref<FormInstance | null>(null)\n  const submitting = ref(false)\n  const formState = computed<FormState<T>>(() => {\n    // @ts-ignore\n    const list = columns.value.filter((i) => !i._hidden) as OriginFormColumn[]\n\n    return {\n      submitting: submitting.value,\n      model: model.value,\n      columns: list,\n      ref(instance: any) {\n        formRef.value = instance?.elForm\n      },\n    }\n  })\n\n  const getColumn = (prop: UseFormColumn['prop']) => {\n    for (const i of columns.value) {\n      if (i.prop === prop) {\n        return i\n      }\n    }\n    return null\n  }\n\n  const setColumn = (prop: UseFormColumn['prop'], obj: Partial<UseFormColumn> | null, newVal?: any) => {\n    const originColumn = opts.columns.find((i) => i.prop === prop)\n    const column = getColumn(prop)\n\n    if (originColumn && column && obj) {\n      const copyColumn = cloneDeep(originColumn)\n      const newColumn = formatFormColumn(Object.assign(copyColumn, obj))\n\n      Object.assign(column, newColumn)\n    }\n\n    if (!isUndefined(newVal)) {\n      formState.value.model[prop as keyof FormState<T>['model']] = newVal\n    }\n  }\n\n  const toggleColumn = (prop: UseFormColumn['prop'] | UseFormColumn['prop'][], state?: boolean) => {\n    const props = Array.isArray(prop) ? prop : [prop]\n\n    for (const i of columns.value) {\n      if (props.includes(i.prop)) {\n        i._hidden = !state ?? !i._hidden\n      }\n    }\n  }\n\n  const submit = async (post?: (model: T) => any) => {\n    try {\n      submitting.value = true\n\n      const valid = (await formRef.value?.validate()) ?? true\n\n      if (valid && post) await post(toRaw(unref(model)))\n\n      submitting.value = false\n    } catch (error) {\n      submitting.value = false\n\n      throw error\n    }\n  }\n\n  const setModel = (obj: Partial<T>, isReset = false) => {\n    if (isReset) {\n      model.value = obj\n      // @ts-ignore\n      columns.value = opts.columns.map((i) => formatFormColumn(i))\n      formRef.value?.clearValidate()\n      return\n    }\n    model.value = { ...model.value, ...obj }\n  }\n\n  const getModel = (key: keyof T) => {\n    return model.value[key]\n  }\n\n  return {\n    formState,\n    getColumn,\n    setColumn,\n    toggleColumn,\n    submit,\n    setModel,\n    form: formRef,\n    getModel,\n  }\n}\n"],"names":["formatFormColumn","column","prop","formItemProps","label","labelWidth","rules","requiredMsg","hidden","other","useForm","opts","model","ref","columns","i","formRef","submitting","formState","computed","list","instance","getColumn","obj","newVal","originColumn","copyColumn","cloneDeep","newColumn","isUndefined","state","props","post","_a","toRaw","unref","error","isReset","key"],"mappings":"oKAwBa,MAAAA,EAAoBC,GAA0B,CACnD,KAAA,CAAE,KAAAC,EAAM,cAAAC,EAAe,MAAAC,EAAO,WAAAC,EAAY,MAAAC,EAAO,YAAAC,EAAa,OAAAC,EAAQ,GAAGC,CAAA,EAAUR,EAwBlF,MAtBuB,CAC5B,GAAGQ,EACH,QAASD,EACT,KAAAN,EACA,cAAe,CACb,KAAAA,EACA,MAAAE,EACA,WAAAC,EACA,MAAOC,IAEHC,EACA,CACE,CACE,SAAU,GACV,QAASA,CACX,CAAA,EAEF,CAAC,GACL,GAAGJ,CACL,CAAA,CAIJ,EA0BO,SAASO,EAA0BC,EAAyB,CACjE,MAAMC,EAAQC,EAAO,CAAE,GAAIF,EAAK,UAAY,KAAY,EAClDG,EAAUD,EAAkBF,EAAK,QAAQ,IAAKI,GAAMf,EAAiBe,CAAC,CAAC,CAAC,EAExEC,EAAUH,EAAyB,IAAI,EACvCI,EAAaJ,EAAI,EAAK,EACtBK,EAAYC,EAAuB,IAAM,CAEvC,MAAAC,EAAON,EAAQ,MAAM,OAAQC,GAAM,CAACA,EAAE,OAAO,EAE5C,MAAA,CACL,WAAYE,EAAW,MACvB,MAAOL,EAAM,MACb,QAASQ,EACT,IAAIC,EAAe,CACjBL,EAAQ,MAAQK,GAAA,YAAAA,EAAU,MAC5B,CAAA,CACF,CACD,EAEKC,EAAapB,GAAgC,CACtC,UAAAa,KAAKD,EAAQ,MAClB,GAAAC,EAAE,OAASb,EACN,OAAAa,EAGJ,OAAA,IAAA,EA4DF,MAAA,CACL,UAAAG,EACA,UAAAI,EACA,UA5DgB,CAACpB,EAA6BqB,EAAoCC,IAAiB,CAC7F,MAAAC,EAAed,EAAK,QAAQ,KAAMI,GAAMA,EAAE,OAASb,CAAI,EACvDD,EAASqB,EAAUpB,CAAI,EAEzB,GAAAuB,GAAgBxB,GAAUsB,EAAK,CAC3B,MAAAG,EAAaC,EAAUF,CAAY,EACnCG,EAAY5B,EAAiB,OAAO,OAAO0B,EAAYH,CAAG,CAAC,EAE1D,OAAA,OAAOtB,EAAQ2B,CAAS,EAG5BC,EAAYL,CAAM,IACXN,EAAA,MAAM,MAAMhB,CAAmC,EAAIsB,EAC/D,EAgDA,aA7CmB,CAACtB,EAAuD4B,IAAoB,CAC/F,MAAMC,EAAQ,MAAM,QAAQ7B,CAAI,EAAIA,EAAO,CAACA,CAAI,EAErC,UAAAa,KAAKD,EAAQ,MAClBiB,EAAM,SAAShB,EAAE,IAAI,IACvBA,EAAE,QAAU,CAACe,EAEjB,EAuCA,OApCa,MAAOE,GAA6B,OAC7C,GAAA,CACFf,EAAW,MAAQ,IAEJ,OAAMgB,EAAAjB,EAAQ,QAAR,YAAAiB,EAAe,aAAe,KAEtCD,GAAM,MAAMA,EAAKE,EAAMC,EAAMvB,CAAK,CAAC,CAAC,EAEjDK,EAAW,MAAQ,SACZmB,GACP,MAAAnB,EAAW,MAAQ,GAEbmB,CACR,CAAA,EAwBA,SArBe,CAACb,EAAiBc,EAAU,KAAU,OACrD,GAAIA,EAAS,CACXzB,EAAM,MAAQW,EAENT,EAAA,MAAQH,EAAK,QAAQ,IAAKI,GAAMf,EAAiBe,CAAC,CAAC,GAC3DkB,EAAAjB,EAAQ,QAAR,MAAAiB,EAAe,gBACf,OAEFrB,EAAM,MAAQ,CAAE,GAAGA,EAAM,MAAO,GAAGW,EAAI,EAcvC,KAAMP,EACN,SAZgBsB,GACT1B,EAAM,MAAM0B,CAAG,CAWtB,CAEJ"}